diff --git a/src/App.jsx b/src/App.jsx
index ac2632c..daa1310 100644
--- a/src/App.jsx
+++ b/src/App.jsx
@@ -3,28 +3,15 @@ import { ThemeProvider } from "./contexts/ThemeContext";
 import { LanguageProvider } from "./contexts/LanguageContext";
 import ErrorBoundary from "./services/ErrorBoundary";
 import NotificationSystem from "./components/NotificationSystem";
+import Cursor3D from "./components/Cursor3D";
 import { POSITION_CONFIG } from "./constants/buttons";
 
 function App() {
-  // Check if we're on test page
-  const isTestPage = window.location.pathname === '/test';
-  
-  if (isTestPage) {
-    return (
-      <ErrorBoundary>
-        <LanguageProvider>
-          <ThemeProvider>
-            <LogoTestPage />
-          </ThemeProvider>
-        </LanguageProvider>
-      </ErrorBoundary>
-    );
-  }
-
   return (
     <ErrorBoundary>
       <LanguageProvider>
         <ThemeProvider>
+          <Cursor3D />
           <NotificationSystem />
           <Neurobase 
             {...POSITION_CONFIG}
diff --git a/src/components/ContainerFrame.css b/src/components/ContainerFrame.css
index a1d1358..1d04bb4 100644
--- a/src/components/ContainerFrame.css
+++ b/src/components/ContainerFrame.css
@@ -1,38 +1,43 @@
 .container-frame {
   /* Auto layout */
   display: flex;
-  flex-direction: column;
-  align-items: flex-start;
-  justify-content: center;
+  flex-direction: row;
+  align-items: center;
+  justify-content: space-between;
   padding: clamp(8px, 1vw, 16px);
   gap: clamp(12px, 2vw, 16px);
 
   position: absolute;
-  width: clamp(280px, 25vw, 337px);
-  height: clamp(60px, 8vh, 80px);
-  right: clamp(40px, 4vw, 64px);
-  bottom: clamp(40px, 4vw, 64px);
+  /* Responsive width: từ 335px (23.26% của 1440px) */
+  width: clamp(280px, 23vw, 400px);
+  /* Responsive height: từ 80px (7.81% của 1024px) */
+  height: clamp(60px, 8vh, 100px);
+  
+  /* Responsive positioning: từ top 880px (85.94% của 1024px) */
+  bottom: clamp(40px, 4vh, 80px);
+  /* Responsive positioning: từ left 1041px (72.29% của 1440px) */
+  right: clamp(40px, 4vw, 80px);
   
-  /* Tạm thời thêm border để dễ nhận biết */
-  /* border: 2px dashed #ff0000; */
-  /* background-color: rgba(255, 0, 0, 0.1); */
+  /* Thêm z-index cao để đảm bảo hiển thị */
+  z-index: 2000;
   
   /* Đảm bảo không vượt ra ngoài background */
   max-width: calc(100vw - clamp(80px, 8vw, 128px));
   max-height: calc(100vh - clamp(120px, 12vh, 176px));
 }
 
-/* Container cho ModeButton */
-.mode-button-container {
-  /* Vị trí tương đối trong ContainerFrame */
+/* Button mode trong layout ngang */
+.button-mode {
   display: flex;
   align-items: center;
   justify-content: center;
-  
-  /* Có thể tùy chỉnh vị trí */
-  margin-left: auto; /* Đẩy sang phải */
-  /* margin-right: auto; */ /* Đẩy sang trái */
-  /* margin: 0 auto; */ /* Căn giữa */
+  flex-shrink: 0;
+  /* Đảm bảo button nằm bên phải và không bị che */
+  margin-left: auto;
+  z-index: 2003;
+  /* Đảm bảo button có đủ không gian */
+  min-width: 80px;
+  height: 100%;
 }
 
 /* Tùy chỉnh vị trí ModeButton */
@@ -51,27 +56,38 @@
 }
 
 /* Responsive breakpoints */
+@media (max-width: 1200px) {
+  .container-frame {
+    width: clamp(250px, 25vw, 350px);
+    height: clamp(50px, 7vh, 80px);
+    right: clamp(30px, 3vw, 60px);
+    bottom: clamp(30px, 3vh, 60px);
+  }
+}
+
 @media (max-width: 768px) {
   .container-frame {
-    width: clamp(250px, 30vw, 280px);
-    height: clamp(50px, 6vh, 60px);
-    right: clamp(20px, 3vw, 40px);
-    bottom: clamp(20px, 3vw, 40px);
+    width: clamp(220px, 28vw, 300px);
+    height: clamp(45px, 6vh, 70px);
+    right: clamp(20px, 2.5vw, 40px);
+    bottom: clamp(20px, 2.5vh, 40px);
   }
 }
 
 @media (max-width: 480px) {
   .container-frame {
-    width: clamp(200px, 35vw, 250px);
-    height: clamp(40px, 5vh, 50px);
-    right: clamp(10px, 2vw, 20px);
-    bottom: clamp(10px, 2vw, 20px);
+    width: clamp(180px, 32vw, 250px);
+    height: clamp(40px, 5vh, 60px);
+    right: clamp(15px, 2vw, 30px);
+    bottom: clamp(15px, 2vh, 30px);
   }
 }
 
 @media (max-width: 360px) {
   .container-frame {
-    width: clamp(180px, 40vw, 200px);
-    height: clamp(35px, 4vh, 40px);
+    width: clamp(150px, 35vw, 200px);
+    height: clamp(35px, 4vh, 50px);
+    right: clamp(10px, 1.5vw, 20px);
+    bottom: clamp(10px, 1.5vh, 20px);
   }
 } 
\ No newline at end of file
diff --git a/src/components/Cursor3D.jsx b/src/components/Cursor3D.jsx
new file mode 100644
index 0000000..8b66b76
--- /dev/null
+++ b/src/components/Cursor3D.jsx
@@ -0,0 +1,202 @@
+import React, { useRef, useEffect, useState } from 'react';
+import * as THREE from 'three';
+import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
+import { useTheme } from '../contexts/ThemeContext';
+
+const Cursor3D = () => {
+  const mountRef = useRef(null);
+  const { currentMode } = useTheme();
+  const [isLoaded, setIsLoaded] = useState(false);
+  const [isHovering, setIsHovering] = useState(false);
+  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
+  
+  // Scene, camera, renderer refs
+  const sceneRef = useRef(null);
+  const cameraRef = useRef(null);
+  const rendererRef = useRef(null);
+  const modelRef = useRef(null);
+  const mixerRef = useRef(null);
+  const clockRef = useRef(new THREE.Clock());
+
+  // Get model path based on theme
+  const getModelPath = (theme) => {
+    switch (theme) {
+      case 'dark':
+        return '/neuro_core/config/models_3d/hand_robot_dark_v2.glb';
+      case 'balance':
+        return '/neuro_core/config/models_3d/hand_robot_balance_v2.glb';
+      case 'light':
+      case 'gold':
+        return '/neuro_core/config/models_3d/hand_robot_gold_v2.glb';
+      default:
+        return '/neuro_core/config/models_3d/hand_robot_balance_v2.glb';
+    }
+  };
+
+
+
+  // Initialize Three.js scene
+  useEffect(() => {
+    if (!mountRef.current) return;
+
+    console.log('🎯 Initializing 3D cursor...');
+
+    // Scene setup
+    const scene = new THREE.Scene();
+    sceneRef.current = scene;
+
+    // Camera setup (orthographic for 2D-like cursor)
+    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 1000);
+    camera.position.set(0, 0, 5);
+    cameraRef.current = camera;
+
+    // Renderer setup
+    const renderer = new THREE.WebGLRenderer({ 
+      alpha: true, 
+      antialias: true,
+      powerPreference: "high-performance"
+    });
+    renderer.setSize(150, 150); // Increased size for better visibility
+    renderer.setClearColor(0x000000, 0);
+    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
+    rendererRef.current = renderer;
+
+    mountRef.current.appendChild(renderer.domElement);
+
+    // Load model
+    const loader = new GLTFLoader();
+    const modelPath = getModelPath(currentMode);
+    
+    console.log('🎯 Loading cursor model from:', modelPath);
+
+    loader.load(
+      modelPath,
+      (gltf) => {
+        console.log('✅ Cursor model loaded successfully');
+        const model = gltf.scene;
+        
+        // Scale and position the model
+        model.scale.set(0.8, 0.8, 0.8); // Increased scale
+        model.position.set(0, 0, 0);
+        
+        // Add to scene
+        scene.add(model);
+        modelRef.current = model;
+
+        // Setup animations if available
+        if (gltf.animations && gltf.animations.length > 0) {
+          const mixer = new THREE.AnimationMixer(model);
+          const action = mixer.clipAction(gltf.animations[0]);
+          action.play();
+          mixerRef.current = mixer;
+        }
+
+        setIsLoaded(true);
+      },
+      (progress) => {
+        const percent = (progress.loaded / progress.total * 100);
+        console.log('🎯 Loading cursor model:', percent + '%');
+      },
+      (error) => {
+        console.error('❌ Error loading cursor model:', error);
+      }
+    );
+
+    // Animation loop
+    const animate = () => {
+      requestAnimationFrame(animate);
+
+      // Update animations
+      if (mixerRef.current) {
+        const delta = clockRef.current.getDelta();
+        mixerRef.current.update(delta);
+      }
+
+      // Render
+      renderer.render(scene, camera);
+    };
+    animate();
+
+    // Cleanup
+    return () => {
+      if (mountRef.current && renderer.domElement) {
+        mountRef.current.removeChild(renderer.domElement);
+      }
+      renderer.dispose();
+    };
+  }, [currentMode]);
+
+  // Handle mouse movement
+  useEffect(() => {
+
+    const handleMouseMove = (e) => {
+      setMousePosition({ x: e.clientX, y: e.clientY });
+    };
+
+    const handleMouseEnter = () => {
+      setIsHovering(true);
+      if (modelRef.current) {
+        modelRef.current.scale.set(1.0, 1.0, 1.0);
+      }
+    };
+
+    const handleMouseLeave = () => {
+      setIsHovering(false);
+      if (modelRef.current) {
+        modelRef.current.scale.set(0.8, 0.8, 0.8);
+      }
+    };
+
+    document.addEventListener('mousemove', handleMouseMove);
+    document.addEventListener('mouseenter', handleMouseEnter);
+    document.addEventListener('mouseleave', handleMouseLeave);
+
+    return () => {
+      document.removeEventListener('mousemove', handleMouseMove);
+      document.removeEventListener('mouseenter', handleMouseEnter);
+      document.removeEventListener('mouseleave', handleMouseLeave);
+    };
+  }, [isLoaded]);
+
+  // Handle click animation
+  useEffect(() => {
+
+    const handleClick = () => {
+      if (modelRef.current) {
+        // Quick scale animation for click feedback
+        const originalScale = modelRef.current.scale.clone();
+        modelRef.current.scale.set(0.6, 0.6, 0.6);
+        
+        setTimeout(() => {
+          if (modelRef.current) {
+            modelRef.current.scale.copy(originalScale);
+          }
+        }, 100);
+      }
+    };
+
+    document.addEventListener('click', handleClick);
+    return () => document.removeEventListener('click', handleClick);
+  }, [isLoaded]);
+
+  return (
+    <>
+      <div
+        ref={mountRef}
+        style={{
+          position: 'fixed',
+          top: mousePosition.y,
+          left: mousePosition.x,
+          width: '150px',
+          height: '150px',
+          pointerEvents: 'none',
+          zIndex: 9999,
+          transform: 'translate(-50%, -50%)',
+          transition: 'none'
+        }}
+      />
+    </>
+  );
+};
+
+export default Cursor3D; 
\ No newline at end of file
diff --git a/src/components/ModeButton.css b/src/components/ModeButton.css
index 186fb68..ced885f 100644
--- a/src/components/ModeButton.css
+++ b/src/components/ModeButton.css
@@ -1,12 +1,10 @@
 .mode-btn-root {
   position: relative;
-  width: 369px;
-  height: 80px;
-  right: 64000px;
-  top: 880px;
   display: flex;
   align-items: center;
-  z-index: 10;
+  justify-content: center;
+  cursor: none !important;
+  transition: all 0.3s ease;
 }
 
 .mode-btn-frame {
@@ -17,7 +15,7 @@
   gap: 16px;
   width: 369px;
   height: 80px;
-  cursor: pointer;
+  cursor: none !important;
   position: relative;
 }
 
diff --git a/src/components/Neurobase.css b/src/components/Neurobase.css
index f0ec4d3..8e8bba4 100644
--- a/src/components/Neurobase.css
+++ b/src/components/Neurobase.css
@@ -460,6 +460,7 @@
   bottom: clamp(40px, 4vw, 64px);
   right: clamp(40px, 4vw, 64px);
   z-index: 10;
+  cursor: none !important;
 }
 
 /* Responsive button positioning for smaller screens */
@@ -520,6 +521,17 @@
   perspective: 1000px;
 }
 
+.button-archives,
+.button-telephone,
+.button-reunion,
+.button-accueil,
+.button-commandes,
+.button-emails,
+.button-agenda,
+.button-colis {
+  cursor: none !important;
+}
+
 /* High contrast mode support */
 @media (prefers-contrast: high) {
   .neurobase-title {
diff --git a/src/components/Neurobase.jsx b/src/components/Neurobase.jsx
index 32571e0..64d7a3a 100644
--- a/src/components/Neurobase.jsx
+++ b/src/components/Neurobase.jsx
@@ -8,7 +8,7 @@ import backgroundImg from "../assets/background1.png";
 import MenuButton from "./MenuButton";
 import ModeButton from "./ModeButton";
 // Components ContainerFrame for ProgressBar
-import ContainerFramePB from "./ContainerFrame";
+import ContainerFrame from "./ContainerFrame";
 // Components ContainerFrame for Menu
 import ContainerFrameMenu from "./ContainerFrame";
 import GoldenButton from "./GoldenButton";
@@ -616,23 +616,15 @@ export default function Neurobase() {
       </div>
       
       {/* Container Frame để chứa các component */}
-      <div className="button-mode">
-        <ModeButton
-          size={80}
-          tooltip="Switch Theme Mode"
-          tooltipPosition="top"
-          onModeChange={handleModeButtonClick}
-        />
-      </div>
-      <ContainerFramePB>
-        {/* Text indicator để xác nhận ContainerFrame */}
-        {/* <div style={{ color: 'black', fontSize: '12px' }}>ContainerFrame Active</div> */}
-        
+
+      <ContainerFrame>
         {/* ProgressBar Component */}
         <div style={{ 
           display: 'flex',
           justifyContent: 'flex-start',
-          alignItems: 'center'
+          alignItems: 'center',
+          flex: 1,
+          maxWidth: '70%'
         }}>
           <ProgressBar 
             value={progressValue}
@@ -643,14 +635,16 @@ export default function Neurobase() {
           />
         </div>
         
-        {/* ModeButton với vị trí tương đối */}
-        {/* FunctionButton */}
-        {/* Ví dụ thêm các component khác:
-        <SomeOtherComponent />
-        <AnotherComponent />
-        <ModeButton/>
-        */}
-      </ContainerFramePB>
+        {/* ModeButton */}
+        <div className="button-mode">
+          <ModeButton
+            size={80}
+            tooltip="Switch Theme Mode"
+            tooltipPosition="top"
+            onModeChange={handleModeButtonClick}
+          />
+        </div>
+      </ContainerFrame>
       
       {/* Menu Container Frame với kích thước responsive */}
       <ContainerFrameMenu
diff --git a/src/components/NotificationSystem.css b/src/components/NotificationSystem.css
index 8e9c33d..d06b886 100644
--- a/src/components/NotificationSystem.css
+++ b/src/components/NotificationSystem.css
@@ -6,26 +6,25 @@
   display: flex;
   flex-direction: column;
   gap: 10px;
+  max-width: 400px;
   pointer-events: none;
 }
 
 .notification {
   background: rgba(255, 255, 255, 0.95);
-  border-radius: 8px;
-  padding: 12px 16px;
-  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
+  border-radius: 12px;
+  padding: 16px;
+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
   backdrop-filter: blur(10px);
-  border: 1px solid rgba(0, 0, 0, 0.1);
-  min-width: 300px;
-  max-width: 400px;
+  border: 1px solid rgba(255, 255, 255, 0.2);
   animation: slideIn 0.3s ease-out;
   pointer-events: auto;
-  cursor: pointer;
+  cursor: none !important;
   transition: all 0.2s ease;
 }
 
 .notification:hover {
-  transform: translateX(-5px);
+  transform: translate(-5px);
   box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
 }
 
@@ -48,7 +47,7 @@
   border: none;
   font-size: 18px;
   color: #666;
-  cursor: pointer;
+  cursor: none !important;
   padding: 0;
   width: 20px;
   height: 20px;
@@ -85,20 +84,20 @@
 @media (prefers-color-scheme: dark) {
   .notification {
     background: rgba(30, 30, 30, 0.95);
-    border-color: rgba(255, 255, 255, 0.1);
+    border: 1px solid rgba(255, 255, 255, 0.1);
   }
   
   .notification-message {
-    color: #e0e0e0;
+    color: #fff;
   }
   
   .notification-close {
-    color: #999;
+    color: #ccc;
   }
   
   .notification-close:hover {
     background: rgba(255, 255, 255, 0.1);
-    color: #e0e0e0;
+    color: #fff;
   }
 }
 
diff --git a/src/components/ProgressBar.css b/src/components/ProgressBar.css
index 0571e80..03db8d6 100644
--- a/src/components/ProgressBar.css
+++ b/src/components/ProgressBar.css
@@ -1,51 +1,39 @@
 .progress-bar-container {
   position: relative;
-  width: clamp(200px, 20vw, 239px);
-  height: clamp(60px, 8vh, 82px);
-  opacity: 1;
-  gap: clamp(6px, 1vw, 8px);
-  display: flex;
-  flex-direction: column;
-  align-items: center;
-  justify-content: center;
-  z-index: 50;
+  width: 100%;
+  /* Responsive max-width: từ 239px (71.34% của 335px) */
+  max-width: clamp(160px, 50vw, 220px);
+  margin: 0 auto;
+  padding: clamp(6px, 1vw, 12px);
+  background: rgba(255, 255, 255, 0.1);
+  border-radius: 12px;
+  backdrop-filter: blur(10px);
+  border: 1px solid rgba(255, 255, 255, 0.2);
+  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
+  /* Thêm z-index để đảm bảo hiển thị */
+  z-index: 2001;
 }
 
-/* Text bên trên Progress Bar */
 .progress-text {
-  width: clamp(200px, 20vw, 239px);
-  height: clamp(20px, 3vh, 25px);
-  
-  /* P3/Bold */
-  font-family: 'Open Sans';
-  font-style: normal;
-  font-weight: 700;
-  font-size: clamp(14px, 2vw, 18px);
-  line-height: clamp(20px, 3vh, 25px);
-  display: flex;
-  align-items: center;
   text-align: center;
-  
-  color: #FAECD2;
-  
-  /* Inside auto layout */
-  flex: none;
-  order: 0;
-  flex-grow: 0;
-  
-  margin-bottom: 0px;
+  margin-bottom: clamp(6px, 1vh, 10px);
+  font-size: clamp(10px, 1.5vw, 14px);
+  font-weight: 600;
+  color: #333;
+  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
 }
 
 .progress-bar {
   position: relative;
-  width: clamp(200px, 20vw, 239px);
-  height: clamp(18px, 3vh, 24px);
-  left: 0px;
-  top: 0.5px;
-  background: #D2B676;
-  border-radius: clamp(6px, 1vw, 8px);
-  cursor: pointer;
-  overflow: visible;
+  width: 100%;
+  /* Responsive height: từ 12px */
+  height: clamp(8px, 1vh, 12px);
+  background: linear-gradient(90deg, #e0e0e0, #f0f0f0);
+  border-radius: 6px;
+  overflow: hidden;
+  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
+  cursor: none !important;
+  z-index: 2002;
 }
 
 .progress-fill {
@@ -53,162 +41,158 @@
   top: 0;
   left: 0;
   height: 100%;
-  background: linear-gradient(90deg, #F5D180 0%, #C39E4A 50%, #866B2D 100%);
-  border-radius: clamp(6px, 1vw, 8px);
+  background: linear-gradient(90deg, #f5d180, #c39e4a, #866b2d);
+  border-radius: 6px;
   transition: width 0.1s ease;
 }
 
 .progress-thumb {
   position: absolute;
-  width: clamp(32px, 4vw, 40px);
-  height: clamp(32px, 4vw, 40px);
+  /* Responsive size: từ 32px */
+  width: clamp(24px, 3vw, 32px);
+  height: clamp(24px, 3vw, 32px);
   left: 82px;
-  top: clamp(-6px, -1vh, -8px);
-  cursor: grab;
+  top: -10px;
+  cursor: none !important;
   user-select: none;
-  z-index: 60;
-  min-width: 44px; /* Touch target minimum */
-  min-height: 44px;
+  z-index: 2003;
+  min-width: clamp(32px, 4vw, 44px);
+  min-height: clamp(32px, 4vw, 44px);
 }
 
 .progress-thumb:active {
-  cursor: grabbing;
+  cursor: none !important;
 }
 
 .thumb-outer-glow {
   position: absolute;
-  left: 0%;
-  right: 0%;
-  top: 0%;
-  bottom: 0%;
-  
-  /* Auto layout */
+  inset: 0%;
   display: flex;
   flex-direction: row;
   justify-content: center;
   align-items: center;
-  padding: clamp(4px, 1vw, 6px) clamp(8px, 1.5vw, 12px);
-  gap: clamp(3px, 0.5vw, 4px);
-  
-  background: linear-gradient(180deg, rgba(102, 102, 102, 0.2) 0%, rgba(102, 102, 102, 0) 32.69%), 
-              linear-gradient(180deg, rgba(102, 102, 102, 0) 50%, rgba(102, 102, 102, 0.4) 100%), 
-              linear-gradient(0deg, rgba(29, 29, 29, 0.2), rgba(29, 29, 29, 0.2)), 
-              #1D1D1D;
-  background-blend-mode: plus-lighter, plus-lighter, color-burn, plus-lighter;
-  box-shadow: inset 8px 8px 4.5px -9px #FFFFFF, 
-              inset -6px -6px 3px -7px #B3B3B3, 
-              inset 1px 1px 0.5px -1px #B3B3B3, 
-              inset 0px 0px 11px rgba(242, 242, 242, 0.5);
-  backdrop-filter: blur(10px);
+  padding: 6px 12px;
+  gap: 3px;
+  background: linear-gradient(135deg, #ffffff, #f0f0f0);
   border-radius: 50%;
+  box-shadow: 
+    inset 8px 8px 4.5px -9px #ffffff,
+    inset -6px -6px 3px -7px #b3b3b3,
+    inset 1px 1px 0.5px -1px #b3b3b3,
+    inset 0 0 15px rgba(242, 242, 242, 0.7),
+    0 4px 8px rgba(0, 0, 0, 0.2),
+    0 2px 4px rgba(0, 0, 0, 0.1);
+  border: 1px solid rgba(255, 255, 255, 0.8);
+  transition: all 0.2s ease;
 }
 
 .thumb-middle-circle {
-  position: absolute;
-  width: clamp(24px, 3vw, 30px);
-  height: clamp(24px, 3vw, 30px);
-  background: linear-gradient(289.25deg, #F5D180 9.32%, #C39E4A 26.97%, #866B2D 76.55%, #3C241B 91.09%);
+  width: 20px;
+  height: 20px;
+  background: linear-gradient(135deg, #f5d180, #c39e4a);
   border-radius: 50%;
+  box-shadow: inset 2px 2px 4px rgba(255, 255, 255, 0.8), inset -2px -2px 4px rgba(0, 0, 0, 0.2);
 }
 
 .thumb-core-circle {
-  position: absolute;
-  width: clamp(18px, 2.5vw, 22px);
-  height: clamp(18px, 2.5vw, 22px);
-  background: linear-gradient(209.93deg, #D2B676 10.11%, #B99239 22.51%, #A37817 78.45%, #8A6413 93.23%);
-  box-shadow: inset 0px 14px 21px rgba(255,255,255,0.6);
+  width: 12px;
+  height: 12px;
+  background: linear-gradient(135deg, #866b2d, #4E3117);
   border-radius: 50%;
+  box-shadow: inset 1px 1px 2px rgba(255, 255, 255, 0.6), inset -1px -1px 2px rgba(0, 0, 0, 0.3);
 }
 
 .progress-bar-container.disabled {
-  opacity: 0.5;
+  opacity: 0.6;
   pointer-events: none;
 }
 
 .progress-bar-container.disabled .progress-thumb {
-  cursor: not-allowed;
+  cursor: none !important;
 }
 
 .progress-thumb:hover .thumb-outer-glow {
-  box-shadow: inset 8px 8px 4.5px -9px #FFFFFF, 
-              inset -6px -6px 3px -7px #B3B3B3, 
-              inset 1px 1px 0.5px -1px #B3B3B3, 
-              inset 0px 0px 15px rgba(242, 242, 242, 0.7);
+  box-shadow: 
+    inset 8px 8px 4.5px -9px #ffffff,
+    inset -6px -6px 3px -7px #b3b3b3,
+    inset 1px 1px 0.5px -1px #b3b3b3,
+    inset 0 0 15px rgba(242, 242, 242, 0.7),
+    0 6px 12px rgba(0, 0, 0, 0.3),
+    0 3px 6px rgba(0, 0, 0, 0.2);
+  transform: scale(1.05);
 }
 
 .progress-bar:focus {
-  outline: 2px solid #F5D180;
-  outline-offset: 2px;
+  outline: none;
+  box-shadow: 0 0 0 2px rgba(245, 209, 128, 0.5);
 }
 
 .progress-thumb:focus {
-  outline: 2px solid #F5D180;
-  outline-offset: 2px;
+  outline: none;
 }
 
-/* Responsive breakpoints */
 @media (max-width: 768px) {
   .progress-bar-container {
-    width: clamp(180px, 25vw, 200px);
-    height: clamp(50px, 7vh, 60px);
+    max-width: clamp(120px, 40vw, 160px);
+    padding: clamp(4px, 0.8vw, 8px);
   }
   
   .progress-text {
-    width: clamp(180px, 25vw, 200px);
-    font-size: clamp(12px, 1.8vw, 14px);
+    font-size: clamp(8px, 1.2vw, 12px);
   }
   
   .progress-bar {
-    width: clamp(180px, 25vw, 200px);
-    height: clamp(16px, 2.5vh, 18px);
+    height: clamp(6px, 0.8vh, 10px);
   }
   
   .progress-thumb {
-    width: clamp(28px, 3.5vw, 32px);
-    height: clamp(28px, 3.5vw, 32px);
+    width: clamp(20px, 2.5vw, 28px);
+    height: clamp(20px, 2.5vw, 28px);
+    min-width: clamp(28px, 3.5vw, 40px);
+    min-height: clamp(28px, 3.5vw, 40px);
   }
 }
 
 @media (max-width: 480px) {
   .progress-bar-container {
-    width: clamp(160px, 30vw, 180px);
-    height: clamp(45px, 6vh, 50px);
+    max-width: clamp(100px, 35vw, 140px);
+    padding: clamp(3px, 0.6vw, 6px);
   }
   
   .progress-text {
-    width: clamp(160px, 30vw, 180px);
-    font-size: clamp(11px, 1.6vw, 12px);
+    font-size: clamp(7px, 1vw, 10px);
   }
   
   .progress-bar {
-    width: clamp(160px, 30vw, 180px);
-    height: clamp(14px, 2vh, 16px);
+    height: clamp(4px, 0.6vh, 8px);
   }
   
   .progress-thumb {
-    width: clamp(24px, 3vw, 28px);
-    height: clamp(24px, 3vw, 28px);
+    width: clamp(16px, 2vw, 24px);
+    height: clamp(16px, 2vw, 24px);
+    min-width: clamp(24px, 3vw, 36px);
+    min-height: clamp(24px, 3vw, 36px);
   }
 }
 
 @media (max-width: 360px) {
   .progress-bar-container {
-    width: clamp(140px, 35vw, 160px);
-    height: clamp(40px, 5vh, 45px);
+    max-width: clamp(80px, 30vw, 120px);
+    padding: clamp(2px, 0.4vw, 4px);
   }
   
   .progress-text {
-    width: clamp(140px, 35vw, 160px);
-    font-size: clamp(10px, 1.4vw, 11px);
+    font-size: clamp(6px, 0.8vw, 8px);
   }
   
   .progress-bar {
-    width: clamp(140px, 35vw, 160px);
-    height: clamp(12px, 1.8vh, 14px);
+    height: clamp(3px, 0.5vh, 6px);
   }
   
   .progress-thumb {
-    width: clamp(20px, 2.5vw, 24px);
-    height: clamp(20px, 2.5vw, 24px);
+    width: clamp(12px, 1.5vw, 20px);
+    height: clamp(12px, 1.5vw, 20px);
+    min-width: clamp(20px, 2.5vw, 32px);
+    min-height: clamp(20px, 2.5vw, 32px);
   }
 } 
\ No newline at end of file
diff --git a/src/components/ProgressBar.jsx b/src/components/ProgressBar.jsx
index 18eb11c..0a96920 100644
--- a/src/components/ProgressBar.jsx
+++ b/src/components/ProgressBar.jsx
@@ -20,6 +20,16 @@ const ProgressBar = ({
   // Calculate thumb position (82px is the initial position, 239px is total width)
   const thumbPosition = (percentage / 100) * (239 - 40); // 239px width - 40px thumb width
 
+  // Đảm bảo component luôn được render
+  if (typeof value !== 'number' || typeof min !== 'number' || typeof max !== 'number') {
+    console.error('ProgressBar: Invalid props', { value, min, max });
+    return (
+      <div className="progress-bar-container" style={{ border: '2px solid red', background: 'rgba(255, 0, 0, 0.2)' }}>
+        <div className="progress-text">Error: Invalid props</div>
+      </div>
+    );
+  }
+
   const handleMouseDown = (e) => {
     if (disabled) return;
     
diff --git a/src/index.css b/src/index.css
index 08a3ac9..04c02b7 100644
--- a/src/index.css
+++ b/src/index.css
@@ -28,6 +28,18 @@ body {
   place-items: center;
   min-width: 320px;
   min-height: 100vh;
+  /* Hide default cursor globally for 3D cursor */
+  cursor: none !important;
+}
+
+/* Hide default cursor for ALL elements to make 3D cursor truly global */
+* {
+  cursor: none !important;
+}
+
+/* Specific elements that might need different cursor behavior */
+button, a, input, textarea, select, div, span, p, h1, h2, h3, h4, h5, h6 {
+  cursor: none !important;
 }
 
 h1 {
@@ -43,7 +55,7 @@ button {
   font-weight: 500;
   font-family: inherit;
   background-color: #1a1a1a;
-  cursor: pointer;
+  cursor: none !important;
   transition: border-color 0.25s;
 }
 button:hover {
